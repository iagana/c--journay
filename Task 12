
/*
  2. წარმოვიდგინოთ შახმატის დაფა. ლაზიერი -L დგას გარკვეულ ადგილას. 
  დაფაზე მას  შეუძლია სიარული წინ უკან გვერდით მარცხნივ  მარჯვნივ და დიაგონალზე.
  
  მეორე ფიგურა -P დგას გარკვეულ ადგილას;
  
  შეუძლია თუ არა ლაზიერს პაიკის მოკვლა?
  
  
  input: 
  L1 = 2;
  L2 = 4;
  
  P1 = 3;
  P2 = 5;
  
  
  
  კოორდინატები დაფაზე:
  L1 L2 
  P1 P2
  
  
  input: 
  L1 = 2;
  L2 = 4;
  
  P1 = 3;
  P2 = 5;
  
  Output: 
  bollean
  
*/

{
  int L1;
  int L2;
  
  int P1;
  int P2;
  
  int result;
  
  
  if( L1 == P1 || L2 == P2 )
  {
    result = true;
    }
    else
    {
      if( P1 == (L1 + 3) && 
      }
  
}


/*
1. მოცემულია ორი წერთილის კოორდინატები სიბრტყეზე. დავადგინოთ ორივე წერტილი არის თუ არა ერთი და იგივე სააკორდინატო მეოთხედში.
მოცემულია 4 მთელი რიცხვი: x1, y1, x2, y2
result ცვლადში მოვათავსოთ true დადებითი პასუხის შემთხვევაში და false უარყოფითი
Input   | Output
3 3 5 1 | true
*/
{

  int x1;
  int y1;
  
  int x2;
  int y2;
  
  int result;
  
  if( x1 > 0 && y1 > 0 && x2 > 0 && y2 > 0)
  {
    result = true;
  }
  else
    {
      if( x1 < 0 && y1 < 0 && x2 < 0 && y2 < 0)
      {
        reseult = true;
      }
       else
       {
        return = false;
       }
    }
}


*/
2. მოცემულია 3 ნატურალური რიცხვი a, b, c. დავადგინოთ არსებუბოს თუ არა სამკუთხედი მსგავსი გვერდებით.
Input | Output
3 4 5 | true
*/

{
  int a;
  int b;
  int c;
  
  int result;
  
  ab = a + b;
  ac = a + c;
  bc = b + c;
  
  if( ab > c || ac > b || bc > a )
  {
    result = true;
  }
  
  
}



*/
3. მოცემულია 3 ცვლადი. a, b c. რომლებშიც არის მოთავსებული მთელი რიცხვები.
დავწეროთ კოდი რომელიც ამ ჩვლადებს გაუცვლის მნიშვნელობებს ისე რომ ბოლოს აღმოჩნდეს ცვლადებში ციფრები ზრდადობით დალაგებული.
Input | Output
a = 7 | a = 3
b = 3 | b = 4
c = 4 | c = 7
*/

{
  
  
  int a; 
  int b;
  inc c;
  
  int A;
  int B;
  int C;
  
  int max;
  int min;
  
  
  if( a > b && a > c )
  {
    max = a;
  }
  else
  {
    if( b > a && b > c )
    {
      max = b;
    }
    else
    {
      if(c > a && c > b)
      {
      max = c;
      }
    }
  } 
 
 C = max;
 
   if( a < b && a < c )
  {
    min = a;
  }
  else
  {
    if( b < a && b < c )
    {
      min = b;
    }
    else
    {
      if(c < a && c < b)
      {
      min = c;
      }
    }
  } 
 A = min;
 
 if( a>b && b>c || c>b && b>a )
 {
  mid = b;
 }
 else
  {
    if( a>c && c>b || b>c && c>a )
    {
      mid = c;
    }
    else
      {
        mid = a;
      }
  }
 
 B = mid;
 
 result = (A)(B)(C);
 
}
