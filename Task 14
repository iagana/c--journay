/*
  1. მოცემულია მთელი რიცხვი. ვიპოვოთ ციფრების ჯამი
*/

{
  int n;
  int a;
  
  int result;
  
  while (n > 0)
  {
    a = n % 10; // ვიგებ ბოლო ციფრს
    
    result = result + a; 
    
    n = n / 10; // ვიგებ ბოლოს წინა ციფრებს
    
  }
  
}

/*
    2. მოცემულია მთელი რიცხვი. ვიპოვოთ ლუწი ციფრების ჯამი
*/

{
  int n;
  
  int a;
  
  int result;
  
   while (n > 0)
    {
      a = n % 10; // ვიგებ ბოლო ციფრს
    
        if (a % 2 == 0)
        {
        result = result + a; 
        }
        else
        {
        }
    
      n = n / 10; // ვიგებ ბოლოს წინა ციფრებს
    }
}

/*
  3. მოცემულია მთელი რიცხვი. შევაბრუნოთ მისი ციფრები
  input | output
  1234  | 4321
*/

{
   int n;
   
   int a;
   
   a = n;
   
   int result;
   
   
   while (a > 0)
   {
     last = a % 10;
     
     result = result * 10 + last; // ბოლო ციფრს ვამატებ ათეულებით
     
     a = a / 10;
     
   }
   
}


/*
  4. მოცემულია 2 ნატურალური მთელი რიცხვი. x და n. ვიპოვოთ x რიცხვის n ხარისხი.
*/

{
  int x;
  int n;
  
  int power;
  
  power = 1;
  
  int count;
  
  while (count < n)
  {
   power = power * x;
    
   count = count + 1;
  }
  
}


/*
  5. მოცემულია მთელი რიცხვი N. შევქმნათ ცვლადი i და მასში მოვათავსოთ თანმიმდევრობით 
ნატურალური რიცხვების სრული კვადრატები, რომლებიც არ აღემატება N-ს.
Input | Result
15    | 1 4 9
*/

{
  int N;
  N = 6;
  int i;
  
  while ( N > 0)
  {
   minus = N - 1;
   power = minus * minus;
    if (N < power)
  }
  

  
  
  
}

/*
   6. მოცემულია მთელი რიცხვი არანაკლები 2-ზე. ვიპოვოთ მისი უმცირესი ნატურალური გამყოფი, განსხვავებული 1-სად.
Input | Result
15    | 3
*/

{
  
}

/*
  7. მოცემულია მთელი რიცხვი N. შევქმნათ ცვლადი i და მასში მოვათავსოთ თანმიმდევრობით 
2-ის კვადრატები, რომლებიც არ აღემატება N-ს.
Input | Result
50    | 1 2 4 8 16 32
*/

{
  
}

*/
  8. მოცემულია ნატურალური რიცხვი. დავადგინოთ არის თუ არა მოცემული რიცხვი 2-ის ხარისხი.
Input | Result
1     | false
4     | true
5     | false
*/

{
  
}
