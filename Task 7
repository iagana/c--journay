/*
  1. მოცემულია 2 რიცხვი ვიპოვოთ მაქსიმუმი
*/
{
    int a;
    int b;
    
    a = 10;
    b = 5;
    
    int c;
    int d;
    int h;
    int max;
    
    
    c = (a + b)/2; // ვცდილობ რო მივიდე ორი რიცხვისშუა წერტილში
    h = c + (a + b) % 2; // აქ ვუმატებ ნაშთს კენტის შემთხვევაში
    d = (a - b)/2; // ვცდილობ რო მივიდე ორი რიცხვის შუა წერტილში და ვიგებ ნახხევარს
    max = h + d; // ნახევრებს ვამატებ და ვიღებ უმაღლესს
    
 // პროგრამა სწორად მუშაობს, ლუწი რიცხვების შემთხვევაში
// პრობლემა მაქვს კენტ რიცხვებთან. როცა a+b= 15 ს და 15/2 ზე არის 7.5, int ამრგვალებს 0 ისკენ. და აკლებს 0.5 ს. 
მერე ეგ მრგვალდება და გამოდის მაქსიმუმზე ერტით ნაკლები. ვცადე ასევე საბოლოო განტოლებაში + 1, მარა ლუწს და კენტს რო ვერ ვარჩევთ, ეს ყველას უმატებს
// ვცადე მოდუსით გაყოფილის დამატება c და გამოვიდა ამ პრობლემის მოგვარება...
// მეორე პრობლემა მაქვს ასევე რიცხვების თანამიმდევრობის გამო. ანუ პროგრამა სწორად იმუშავებს თუ a შია მაღალი რიცხვი და b ში დაბალი.
// მაგრამ პირიქით არა. იმიტო, რო ამ შემთხვევაში გადავდივართ მინუსში და დამატების დროს 1 ით ნაკლები ხდება მაქსიმუმი. მაგალითად თუ უნდა გახდეს
// 10 ხდება 9.
 
 

  
}

/*
2. მოცემულია რიცხვი. თუ ეს რიცხვი ლუწია ცვლადში ჩავწეროთ 1 თუ კენტია ჩავწეროთ 0
*/
{
  ...

 
}
/*
3. N მოსწავლე იყოფს K ვაშლს თანაბრად, ისე რომ ვაშლების რაოდენობა რომელიც 2 მოსწავლეს შეხვდა 1-ზე მეტით არ განსხვავდებოდეს.
Input Data
    პროგრამა იღებს ორ მთელ რიცხვს N და K
Output Data
    აღვწეროთ ცვლადი result და მოვათავსოთ მოსწავლეების რაოდენობა რომლებსაც შეხვდათ ნაკლები ვაშლი ვიდრე მათ კლასელებს.
მაგალითები:
Input   Output
7 30    5
Input   Output
7 28    0
*/
{
 int N;
 int K;
 int odd;
 int times;
 int min;
 int result;
 int resultFinal;
 int even;
 int Finalresult;
 
 
 
 odd = K / N ; // ვაშლს ვყოფ მოსწავლეებზე
 times = odd * N; // მოსწავლეებს ვაბრავლებ გამყოფზე
 min = K - time; // მთლიან ვაშლებს ვაკლებ ზუსტად გაყოფილ ვაშლებს
 result = N - min; // მოსწავლეების რაოდენობას ვაკლებ ნარჩენ ვაშლებს  და ვიღებ ზუსტად რამედმა აიღო 
 resultFinal = N - result; // ყველა მოსწავლეს ვაკლებ რამდენზეც ზუსტად გაიყო 
 
 even = (K + N) % 2) + resultFinal - (K + (N % 2);
 Finalresult = even;
 
}

/*
  4. მოცემულია 2 ნატურალური რიცხვი n და m. თუ ერთი იყოფა მეორეზე მთელად გამოვიტანოთ 1 თუ არა და ნებისმიერი სხვა რიცხვი
  Input Data
      მოცემულია ორი ნატურალური რიცხვი n და m.
  Output Data
      მოვათავსოთ result ცვლადში ამოცანის შედეგი
  მაგალითები:
  Input   Output
  2 8     1
  Input   Output
  8 2     1
*/
{
  int n;
  int m;
  int even;
  int result;
  
  n = 5;
  m = 2;
  
  
  int result;

  
 even = (n % m) * (m % n)


 result = 1 + even;
}
